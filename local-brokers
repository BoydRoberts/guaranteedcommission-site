<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Local Brokers | GuaranteedCommission.com</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .hint { font-size: 11px; color:#6b7280; }
  </style>
</head>
<body class="bg-gray-100 text-gray-900">

  <header class="bg-white shadow">
    <div class="max-w-4xl mx-auto px-4 py-4 flex items-center justify-between">
      <a href="/index.html" class="text-sm text-blue-600 hover:underline">&larr; Home</a>
      <h1 class="text-lg font-semibold">Local Brokers</h1>
      <a href="/login.html" class="text-sm text-blue-600 hover:underline">Log In</a>
    </div>
  </header>

  <main class="max-w-4xl mx-auto px-4 py-6">
    <section class="bg-white rounded-2xl shadow p-5">
      <h2 class="text-2xl font-bold text-center">Reserve Your Broker Ad</h2>
      <p class="text-sm text-center text-gray-700 mt-1">
        $100 per month per ZIP (1 broker per ZIP). Your brokerage ad displays on all listing detail pages in that ZIP in the “Local Real Estate Brokerage” section.
      </p>

      <div id="status" class="hidden mt-4 text-sm rounded-lg p-3"></div>

      <form id="brokerForm" class="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4" autocomplete="off">
        <div class="md:col-span-2">
          <label class="block text-sm font-semibold">Brokerage Name</label>
          <input id="name" class="w-full border rounded px-3 py-2" placeholder="Your brokerage name" required>
        </div>

        <div>
          <label class="block text-sm font-semibold">Contact Name</label>
          <input id="contact" class="w-full border rounded px-3 py-2" placeholder="Primary contact" required>
        </div>

        <div>
          <label class="block text-sm font-semibold">Email</label>
          <input id="email" type="email" class="w-full border rounded px-3 py-2" placeholder="you@example.com" required>
        </div>

        <div>
          <label class="block text-sm font-semibold">Phone</label>
          <input id="phone" class="w-full border rounded px-3 py-2" placeholder="123-456-7890" inputmode="numeric" required>
          <p class="hint mt-1">Format: 123-456-7890</p>
        </div>

        <div>
          <label class="block text-sm font-semibold">Website (optional)</label>
          <input id="website" class="w-full border rounded px-3 py-2" placeholder="https://example.com">
        </div>

        <div>
          <label class="block text-sm font-semibold">ZIP Code</label>
          <input id="zip" class="w-full border rounded px-3 py-2 text-center" inputmode="numeric" maxlength="5" placeholder="e.g., 92660" required>
          <p class="hint mt-1">Enter a 5-digit ZIP. One broker per ZIP.</p>
        </div>

        <div class="md:col-span-2">
          <label class="block text-sm font-semibold">Broker Ad (optional image)</label>
          <input id="photo" type="file" accept="image/*" class="w-full">
          <div id="photoPreview" class="mt-2"></div>
          <p class="hint mt-1">Recommended: horizontal image. JPG/PNG.</p>
        </div>

        <div class="md:col-span-2 flex items-center justify-between mt-2">
          <div class="text-sm text-gray-700">Your total: <span id="total">$100</span> / month</div>
          <button id="checkoutBtn" type="button" class="px-4 py-2 rounded bg-blue-600 text-white">
            Proceed to Checkout
          </button>
        </div>
      </form>
    </section>

    <section id="thanks" class="hidden bg-emerald-50 rounded-2xl border border-emerald-200 p-5 mt-4 text-emerald-800">
      <h3 class="text-lg font-semibold">Thank you!</h3>
      <p class="text-sm mt-1">Your Local Broker subscription is being set up. Your ad will appear once activated.</p>
    </section>
  </main>

  <!-- Firebase init -->
  <script type="module" src="/scripts/firebase-init.js"></script>

  <script type="module">
    import { db } from "/scripts/firebase-init.js";
    import {
      addDoc, collection, doc, updateDoc, serverTimestamp
    } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
    import {
      getStorage, ref, uploadBytes, getDownloadURL
    } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-storage.js";

    const $ = (id) => document.getElementById(id);
    function setStatus(msg, ok=true){
      const el = $('status'); el.classList.remove('hidden');
      el.className = ok ? 'mt-4 text-sm rounded-lg p-3 bg-green-50 text-green-700'
                        : 'mt-4 text-sm rounded-lg p-3 bg-red-50 text-red-700';
      el.textContent = msg;
    }
    function money(n){ return '$' + Number(n||0).toLocaleString(); }
    function onlyDigits(s){ return String(s||'').replace(/\D/g,''); }
    function formatPhone(s){
      const d = onlyDigits(s).slice(0,10);
      if (d.length <= 3) return d;
      if (d.length <= 6) return d.slice(0,3) + '-' + d.slice(3);
      return d.slice(0,3) + '-' + d.slice(3,6) + '-' + d.slice(6);
    }

    // Price label (fixed $100/mo)
    (function(){ $('total').textContent = money(100); })();

    // Preview photo
    $('photo').addEventListener('change', (e) => {
      const f = e.target.files?.[0]; if (!f) return;
      const r = new FileReader();
      r.onload = () => { $('photoPreview').innerHTML = `<img src="${r.result}" alt="Ad" class="h-28 object-contain rounded border">`; };
      r.readAsDataURL(f);
    });

    // If listing page passed a ZIP (convenience)
    (function(){
      const u = new URL(location.href);
      const z = (u.searchParams.get('zip') || '').trim().slice(0,5);
      if (/^\d{5}$/.test(z)) $('zip').value = z;
    })();

    // Stripe Checkout Link (test)
    const CHECKOUT_LINK_BASE_BROKER = "https://buy.stripe.com/test_9B64gy0zL42f3hC8GS0VO00"; // replace with broker plan link when ready

    const BUCKET_URL = "gs://guaranteedcommission-d4d91.firebasestorage.app"; // match your other pages

    async function maybeUploadPhoto(draftId) {
      try {
        const file = $('photo').files?.[0];
        if (!file) return "";
        const storage = getStorage(undefined, BUCKET_URL);
        const safe = String(file.name || "broker_ad").replace(/[^\w\-.]+/g,"_");
        const path = `localBrokers/${draftId}/ad_${Date.now()}_${safe}`;
        const r = ref(storage, path);
        await uploadBytes(r, file);
        const url = await getDownloadURL(r);
        return url;
      } catch (e) {
        console.warn("[local-brokers] photo upload failed:", e);
        return "";
      }
    }

    $('checkoutBtn').addEventListener('click', async () => {
      try {
        $('checkoutBtn').disabled = true;
        $('checkoutBtn').textContent = 'Starting checkout…';

        const name = $('name').value.trim();
        const contact = $('contact').value.trim();
        const email = $('email').value.trim().toLowerCase();
        const phone = formatPhone($('phone').value.trim());
        const website = $('website').value.trim();
        const zip = ($('zip').value || '').trim();
        if (!name || !contact || !email || !phone || !/^\d{5}$/.test(zip)) {
          setStatus('Please complete brokerage name, contact, email, phone, and a 5-digit ZIP.', false);
          return;
        }

        // Save draft first (pending)
        const draft = {
          name,
          contact,
          email,
          phone,
          website,
          zip,
          photoUrl: "",
          status: "pending",
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp()
        };
        const refDoc = await addDoc(collection(db, "localBrokers"), draft);
        localStorage.setItem("localBrokerDraftId", refDoc.id);

        // Optional: upload ad image, then patch the draft with photoUrl
        const photoUrl = await maybeUploadPhoto(refDoc.id);
        if (photoUrl) {
          await updateDoc(doc(db, "localBrokers", refDoc.id), { photoUrl, updatedAt: serverTimestamp() });
        }

        // Build params and redirect to Stripe
        const params = new URLSearchParams({
          prefilled_email: email,
          client_reference_id: JSON.stringify({ type: "broker", name, contact, email, phone, website, zip })
        });
        window.location.href = `${CHECKOUT_LINK_BASE_BROKER}?${params.toString()}`;
      } catch (e) {
        setStatus(e.message || "Checkout error.", false);
      } finally {
        $('checkoutBtn').disabled = false;
        $('checkoutBtn').textContent = 'Proceed to Checkout';
      }
    });

    // Finalize after Stripe returns
    (async function finalizeIfSuccess(){
      const u = new URL(location.href);
      if (u.searchParams.get('status') === 'success') {
        $('thanks').classList.remove('hidden');
        try {
          const id = localStorage.getItem("localBrokerDraftId");
          if (id) {
            await updateDoc(doc(db, "localBrokers", id), {
              status: "active",
              updatedAt: serverTimestamp()
            });
          }
        } catch (e) {
          console.warn("[local-brokers] finalize failed:", e);
        }
      }
    })();
  </script>
</body>
</html>
